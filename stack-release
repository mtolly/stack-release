#!/usr/bin/env ruby

require 'yaml'
require 'fileutils'
require 'csv'

def sys(*args)
  STDERR.puts "> #{args.join(' ')}"
  result = system(*args)
  unless result
    raise IOError.new "command returned #{$?.exitstatus}"
  end
end

def cd(dir, &blk)
  FileUtils.cd(dir) do
    STDERR.puts "> (cd #{dir}"
    blk.call()
    STDERR.puts "> )"
  end
end

yml = YAML.load File.open 'stack.yaml'
version = `cabal info .`.match(/\A\*\s+[\w-]+-([\d\.]+)\s+/) do |md|
  md[1]
end or raise IOError.new "#{$0}: couldn't parse cabal info"

unless ARGV.length == 2
  STDERR.puts "Usage: #{$0} [platform] [executable name]"
  STDERR.puts "Platforms: windows, mac, mac-app, linux"
  exit 1
end
platform = ARGV[0]
exe      = ARGV[1]

# http://stackoverflow.com/a/171011
module OS
  def OS.windows?
    (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
  end

  def OS.mac?
   (/darwin/ =~ RUBY_PLATFORM) != nil
  end

  def OS.unix?
    !OS.windows?
  end

  def OS.linux?
    OS.unix? and not OS.mac?
  end
end

outdir = ".stack-work/release/#{platform}"
FileUtils.rm_rf outdir
FileUtils.mkdir_p outdir
extra = Dir['README*', 'LICENSE*', 'COPYING*']
extra.each { |f| FileUtils.cp f, outdir }

if OS.mac? && platform == 'mac'

  sys "stack setup"
  sys "stack build"
  FileUtils.cp `stack exec which #{exe}`.chomp, outdir
  sys "strip .stack-work/release/mac/#{exe}"
  sys "dylibbundler -cd -of -b -x #{outdir}/#{exe} -d #{outdir} -p '@executable_path'"

elsif OS.mac? && platform == 'mac-app'

  sys "stack setup"
  sys "stack build"
  contents = "#{outdir}/#{exe}.app/Contents"
  FileUtils.mkdir_p "#{contents}/MacOS"
  FileUtils.mkdir_p "#{contents}/libs"
  FileUtils.cp `stack exec which #{exe}`.chomp, "#{contents}/MacOS"
  sys "strip #{contents}/MacOS/#{exe}"
  sys "dylibbundler -cd -of -b -x #{contents}/MacOS/#{exe} -d #{contents}/libs -p '@executable_path/../libs'"
  File.open("#{contents}/Info.plist", 'w') do |f|
    f.puts <<-XML
      <plist version="1.0">
      <dict>
        <key>CFBundleExecutable</key>
        <string>#{exe}</string>
        <key>CFBundleName</key>
        <string>#{exe}</string>
      </dict>
      </plist>
    XML
  end

elsif OS.unix? && platform == 'windows'

  wineprefix = "#{Dir.home}/.stack/wineprefix"
  ENV['WINEPREFIX'] = wineprefix
  ENV['WINEDEBUG'] = 'fixme-all'
  sys 'wine wineboot'
  begin
    sys 'wine stack --version'
  rescue
    sys 'wget https://github.com/commercialhaskell/stack/releases/download/v0.1.2.0/stack-0.1.2.0-i386-windows.zip -O stack.zip'
    sys 'unzip stack.zip'
    FileUtils.rm 'stack.zip'
    FileUtils.mv 'stack-0.1.2.0-i386-windows.exe', "#{wineprefix}/drive_c/windows/system32/stack.exe"
  end
  sys 'wine stack setup'
  sys 'wine stack build'
  FileUtils.cp Dir[".stack-work/install/i386-windows/*/*/bin/#{exe}.exe"][0], outdir

  def depends(mod)
    sys "wine depends.exe /c /oc:depends.csv #{mod}"
    csv = CSV.read 'depends.csv', headers: true
    FileUtils.rm 'depends.csv'
    csv
  end

  begin
    depends "#{outdir}/#{exe}.exe"
  rescue
    sys 'wget http://www.dependencywalker.com/depends22_x86.zip -O depends.zip'
    sys 'unzip depends.zip'
    FileUtils.rm 'depends.zip'
    %w{exe chm dll}.each { |ext| FileUtils.mv "depends.#{ext}", "#{wineprefix}/drive_c/windows/system32" }
  end

  modules = depends("#{outdir}/#{exe}.exe").map { |ln| ln['Module'] }

else
  STDERR.puts "#{$0}: unsupported platform combination"
  exit 1
end

cd outdir do
  sys "zip -r ../#{exe}-v#{version}-#{platform}.zip ./*"
end
puts "Created .stack-work/release/#{exe}-v#{version}-#{platform}.zip"
